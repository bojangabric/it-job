generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    KANDIDAT
    POSLODAVAC
    MODERATOR
}

enum EmploymentType {
    PRAKSA
    PART_TIME
    FULL_TIME
    CONTRACT
}

enum Experience {
    STUDENT
    JUNIOR
    MID_LEVEL
    SENIOR
    LEAD
}

enum Position {
    FRONT_END_DEVELOPER
    BACK_END_DEVELOPER
    FULL_STACK_DEVELOPER
    UI_UX_DESIGNER
    SYSTEM_ADMINISTRATOR
}

enum APPLICATION_STATUS {
    APPLIED
    ACCEPTED
    REJECTED
}

model Account {
    id       String @id @default(cuid())
    name     String
    email    String @unique
    password String
    image    String @default("/images/default_avatar.png")
    role     Role

    candidate Candidate?
    company   Company?

    @@map("accounts")
}

model Application {
    id        String             @id @default(cuid())
    status    APPLICATION_STATUS
    appliedAt DateTime           @default(now())

    candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
    candidateId String
    jobId       String

    @@map("applications")
}

model Candidate {
    id        String    @id @default(cuid())
    resume    String?
    comments  Comment[]
    savedJobs Job[]

    account      Account       @relation(fields: [accountId], references: [id])
    accountId    String        @unique
    applications Application[]

    @@map("candidates")
}

model Company {
    id       String @id @default(cuid())
    location String
    jobs     Job[]  @relation("jobs")

    account   Account @relation(fields: [accountId], references: [id])
    accountId String  @unique

    @@map("companies")
}

model Job {
    id          String         @id @default(cuid())
    active      Boolean
    title       String
    description String
    skills      String[]
    experience  Experience
    position    Position
    type        EmploymentType
    comments    Comment[]
    createdAt   DateTime       @default(now())

    savedBy    Candidate[]
    postedBy   Company       @relation("jobs", fields: [postedById], references: [id])
    postedById String
    applicants Application[]

    @@map("jobs")
}

model Comment {
    id      String @id @default(cuid())
    comment String

    writtenBy   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    candidateId String
    job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
    jobId       String

    @@map("comments")
}
